# test_agents.py - Teste Individual dos Agentes
"""
Script para testar individualmente os agentes do sistema multiagentes.
√ötil para desenvolvimento e debugging.

Uso: python test_agents.py
"""

import sys
import os

# Adicionar diret√≥rio raiz ao path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app import create_app
from services.multiagent_service import MultiAgentService
from services.groq_service import GroqService
from services.gemini_service import GeminiService

def test_individual_services():
    """Testa servi√ßos individualmente"""
    print("üß™ TESTE INDIVIDUAL DOS SERVI√áOS DE IA")
    print("=" * 50)
    
    app = create_app()
    
    with app.app_context():
        # Teste Groq
        print("\nü§ñ Testando Groq...")
        groq_service = GroqService()
        groq_result = groq_service.generate_response(
            "Ol√°! Voc√™ est√° funcionando?", 
            'test'
        )
        
        if groq_result['success']:
            print(f"   ‚úì Groq OK: {groq_result['content'][:50]}...")
        else:
            print(f"   ‚úó Groq ERRO: {groq_result['error']}")
        
        # Teste Gemini
        print("\nüß† Testando Gemini...")
        gemini_service = GeminiService()
        gemini_result = gemini_service.generate_response(
            "Ol√°! Voc√™ est√° funcionando?", 
            'test'
        )
        
        if gemini_result['success']:
            print(f"   ‚úì Gemini OK: {gemini_result['content'][:50]}...")
        else:
            print(f"   ‚úó Gemini ERRO: {gemini_result['error']}")

def test_multiagent_system():
    """Testa sistema multiagentes"""
    print("\nüë• TESTE DO SISTEMA MULTIAGENTES")
    print("=" * 50)
    
    app = create_app()
    
    with app.app_context():
        multiagent = MultiAgentService()
        
        # Teste com pergunta simples
        test_message = "Como criar um jogo educativo sobre matem√°tica para crian√ßas?"
        
        print(f"\nPergunta de teste: {test_message}")
        print("\nRespostas dos agentes:")
        print("-" * 30)
        
        try:
            # Simular sess√£o (sem banco para teste)
            result = multiagent.start_multiagent_discussion(
                session_id=None, 
                user_message=test_message
            )
            
            for response in result['agents_responses']:
                agent_name = response['agent']['name']
                agent_emoji = response['agent']['emoji']
                content = response['response'][:100] + "..."
                
                print(f"{agent_emoji} {agent_name}:")
                print(f"   {content}")
                print()
            
            print("üéØ S√≠ntese do Coordenador:")
            print(f"   {result['synthesis'][:100]}...")
            
            if result['suggestions']['suggestions']:
                print(f"\nüí° {len(result['suggestions']['suggestions'])} sugest√µes geradas")
            
        except Exception as e:
            print(f"‚ùå Erro no sistema multiagentes: {e}")

def test_specific_agent():
    """Testa agente espec√≠fico"""
    print("\nüéØ TESTE DE AGENTE ESPEC√çFICO")
    print("=" * 50)
    
    app = create_app()
    
    with app.app_context():
        multiagent = MultiAgentService()
        
        # Testar agente de narrativa (Gemini)
        agent = multiagent.agents['narrative']
        print(f"\nTestando: {agent['emoji']} {agent['name']}")
        print(f"Servi√ßo: {agent['service'].upper()}")
        
        context = """
IDEIAS DO BRAINSTORMING:
- Jogo de matem√°tica para crian√ßas
- Aventura em mundo m√°gico
- Resolver problemas com n√∫meros

REFLEX√ÉO SOCR√ÅTICA:
Problema: Crian√ßas t√™m dificuldade com matem√°tica b√°sica
Motiva√ß√£o: Tornar matem√°tica divertida e envolvente
"""
        
        response = multiagent._get_agent_response(
            'narrative', 
            agent, 
            context, 
            "Como criar uma narrativa envolvente para este jogo?", 
            {}
        )
        
        print(f"\nResposta:")
        print(f"   {response[:200]}...")

def interactive_test():
    """Teste interativo com input do usu√°rio"""
    print("\nüí¨ TESTE INTERATIVO")
    print("=" * 50)
    print("Digite 'sair' para encerrar")
    
    app = create_app()
    
    with app.app_context():
        multiagent = MultiAgentService()
        
        while True:
            user_input = input("\nü§î Sua pergunta para os agentes: ").strip()
            
            if user_input.lower() in ['sair', 'exit', 'quit', '']:
                break
            
            try:
                result = multiagent.start_multiagent_discussion(
                    session_id=None,
                    user_message=user_input
                )
                
                print(f"\n{'='*20} RESPOSTAS {'='*20}")
                
                for response in result['agents_responses']:
                    agent = response['agent']
                    content = response['response']
                    
                    print(f"\n{agent['emoji']} {agent['name']}:")
                    print(f"{content}")
                
                print(f"\nüéØ S√çNTESE:")
                print(f"{result['synthesis']}")
                
            except Exception as e:
                print(f"‚ùå Erro: {e}")

def main():
    """Menu principal"""
    print("üß™ SISTEMA DE TESTE DOS AGENTES MULTIAGENTES")
    print("=" * 50)
    print("Escolha uma op√ß√£o:")
    print("1. Testar servi√ßos individuais (Groq/Gemini)")
    print("2. Testar sistema multiagentes")
    print("3. Testar agente espec√≠fico")
    print("4. Teste interativo")
    print("5. Executar todos os testes")
    
    choice = input("\nOp√ß√£o (1-5): ").strip()
    
    if choice == '1':
        test_individual_services()
    elif choice == '2':
        test_multiagent_system()
    elif choice == '3':
        test_specific_agent()
    elif choice == '4':
        interactive_test()
    elif choice == '5':
        test_individual_services()
        test_multiagent_system()
        test_specific_agent()
    else:
        print("Op√ß√£o inv√°lida!")
        return
    
    print("\n" + "=" * 50)
    print("‚úÖ Testes conclu√≠dos!")

if __name__ == '__main__':
    main()